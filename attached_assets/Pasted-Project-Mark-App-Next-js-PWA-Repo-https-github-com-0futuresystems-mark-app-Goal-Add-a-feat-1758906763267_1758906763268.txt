Project: Mark App (Next.js + PWA)
Repo: https://github.com/0futuresystems/mark-app

Goal: Add a feature on the Review page to rewrite a lot’s description using the Main Voice Note + the current AI draft. Keep it simple for a non-technical user (“Mark”). After this is working, we will change the ZIP export format (separate task).

What to build (high-level)

A button on the Review page: “Use my voice note to fix this” (aka Rewrite from Voice Note).

When clicked, it:

Finds the lot’s Main Voice Note media (type: mainVoice).

Transcribes it via a new API route /api/transcribe.

Rewrites the description via a new API route /api/rewrite-description using the transcript + the current description.

Shows a Before / After preview with a short “What changed” summary and lets the user Replace or Cancel.

On Replace: update the lot’s description, set descriptionSource = "photos+voice", store the transcript, and update timestamp.

Constraints / Style

Do not refactor unrelated parts; keep the change minimal and localized.

Preserve the offline-first approach. If offline, queue a “rewrite job” and process when online. Keep implementation lean (re-use existing queued job patterns if present).

Clear error toasts (e.g., “Main Voice Note not found”, “Couldn’t hear that clearly—try again”).

Keep the UI very simple.

Implementation Tasks
0) Repo context & env

Assume Next.js App Router. We already have /api/generate-description and getMediaBlob(...).

Use OpenAI Whisper (or equivalent) for transcription and GPT for rewrite.

Expect these env vars (create if missing):

OPENAI_API_KEY

Optional: model names via OPENAI_TRANSCRIBE_MODEL (default whisper-1) and OPENAI_CHAT_MODEL (default gpt-4o-mini).

1) Data model tweaks

Update src/types.ts (or wherever Lot is defined) to add:

export interface Lot {
  // ...existing fields
  descriptionSource?: 'photos' | 'photos+voice';
  voiceTranscript?: string;
  descriptionUpdatedAt?: string;
}


If a Dexie schema migration is needed, add it minimally.

2) API: /api/transcribe (POST)

File: app/api/transcribe/route.ts

Accept multipart/form-data with a field file (Blob/WebM/MP3/M4A).

Call OpenAI Whisper (or existing STT) and return JSON:

{ "transcript": "string", "lang": "en", "confidence": 0.0 }


Handle errors and return a 400 with a friendly message if transcription fails.

3) API: /api/rewrite-description (POST)

File: app/api/rewrite-description/route.ts

Input JSON:

{
  "originalDescription": "string",
  "transcript": "string",
  "lotMeta": { "lotNumber": "string" }
}


System prompt: Expert auction cataloger. Only correct or add details from transcript. Concise, objective, no invention.

Rules (enforce in prompt):

Keep a clear title.

4–6 bullets: maker (if known), material, era/style (best estimate), size (approx.), condition notes, notable defects.

Then 2–3 short sentences on use/fit/quality.

Prefer seller voice note when conflicts appear.

If unsure: “unknown/unspecified”.

Strict JSON output:

{
  "rewrittenDescription": "<final>",
  "changeSummary": "<2-3 short lines>"
}


Validate JSON shape; return 400 if invalid.

4) Review page UI

File likely: app/(protected)/review/page.tsx
(If a lot detail component exists like LotDetail or DescriptionEditor, hook there.)

Add a button next to the description textarea: “Use my voice note to fix this”.

Click handler (handleRewriteFromVoice):

Find the lot’s Main Voice Note: from the existing media collection where m.lotId === lot.id && m.type === 'mainVoice'. If missing → toast error and return.

const blob = await getMediaBlob(voice.id); (use existing src/lib/media/getMediaBlob.ts).

POST /api/transcribe with multipart/form-data (field file).

POST /api/rewrite-description with { originalDescription: lot.description ?? "", transcript, lotMeta: { lotNumber: lot.number } }.

Show modal with Before (left) and After (right) and a small “What changed” box.

On Replace, update Dexie:

await db.lots.update(lot.id, {
  description: rewrittenDescription,
  descriptionSource: 'photos+voice',
  voiceTranscript: transcript,
  descriptionUpdatedAt: new Date().toISOString(),
});


Then update local state.

Add busy state/spinner (“Listening to your note… Rewriting…”).

Add a small “Play voice note” control (optional but helpful).

5) Offline queuing (lean)

If navigator.onLine === false, store a queued action:

{ type: 'rewriteDescription', lotId, voiceMediaId, originalDescription, createdAt }


Add a minimal processor that, on reconnect or when the Review page mounts online, processes queued items:

Get blob → /api/transcribe → /api/rewrite-description → present preview modal.

If you already have a generic “pending ops” pattern, reuse it.

6) Toasts & errors

Cases to handle:

No Main Voice Note found.

Transcription failed/empty.

Rewrite API returned invalid JSON.

Network/offline.

Keep messages short and friendly.

7) Light refactor / helpers (optional)

A small lib/ai/rewrite.ts helper to call both endpoints in sequence.

A small components/RewritePreviewModal.tsx for Before/After UI.

Acceptance Criteria

On a lot with a Main Voice Note and an AI-generated description:

Clicking “Use my voice note to fix this” transcribes and rewrites successfully.

User sees a Before/After preview and a 2–3 line “What changed”.

On Replace, lot.description updates, descriptionSource is photos+voice, voiceTranscript is stored, descriptionUpdatedAt set.

If no Main Voice Note, a clear toast tells the user.

If offline, the action queues and runs on reconnect.

No regressions to existing Generate from Photos or Review flows.

Build passes, type checks clean.

Testing plan (manual)

Happy path: short clear voice note (≤30s) with a factual correction → After reflects the correction.

Conflict: original says “copper”, voice note says “brass” → After says brass.

Unknowns: voice note missing maker/era → After uses “unknown/unspecified”.

Long/noisy audio → still returns transcript; if empty → friendly error.

Offline mode → queue, then reconnect → preview appears.

Non-English voice → transcript OK; output stays English.

Deliverables

app/api/transcribe/route.ts

app/api/rewrite-description/route.ts

Updated src/types.ts (Lot interface)

UI changes in app/(protected)/review/page.tsx (or related component)

Optional modal component + helper

Small docs note in README: env vars + feature summary

Do not change the ZIP export yet—this is a separate task we’ll do next.