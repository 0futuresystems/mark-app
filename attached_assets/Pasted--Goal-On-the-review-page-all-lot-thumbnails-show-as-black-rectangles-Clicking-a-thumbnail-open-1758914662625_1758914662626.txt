🎯 Goal

On the /review page, all lot thumbnails show as black rectangles. Clicking a thumbnail opens a sluggish viewer where images either don’t appear fully or take too long to render. Fix the root cause, make thumbnails load instantly, and smooth out next/prev navigation.

🔍 Where to look (by priority)

src/components/LotThumbnail.tsx

src/components/PhotoGrid.tsx (or whatever renders the grid/list on /review)

src/components/LightboxCarousel.tsx

src/lib/media/getMediaBlob.ts

The useObjectUrl hook (wherever it is defined)

Any CSS that styles the thumbnail container/overlay (search for bg-black, overlays, z-index)

Service worker / image caching logic if present

✅ What to reproduce

Run the app, go to /review.

Confirm thumbnails are black, and note console warnings/errors.

Click into an item; notice slow/partial image rendering and stutter when moving to next image.

🧩 Likely root causes to check (and fix)

Blob retrieval / MIME type

getMediaBlob(mediaItem.id) might be returning an ArrayBuffer/Response or a Blob without a valid type (e.g., missing image/jpeg/image/png) → browsers can render it as blank.

Log: media id, byte length, and final Blob MIME type. Ensure it’s a real Blob with a correct type.

HEIC/HEIF input

If source images are HEIC (common from iPhones), browsers won’t display them → can appear blank. Ensure we’re converting to JPEG/WEBP on ingest or before display. Confirm actual MIME of stored media.

Object URL lifecycle

URL.createObjectURL may be revoked too early (e.g., on cleanup before <img> loads) causing a blank/black placeholder. Ensure object URLs are only revoked when safe (on unmount or after switching).

Overlay/CSS masking

A dark overlay or absolute element with higher z-index may be covering the image. Inspect LotThumbnail for any overlay defaults, opacity, mix-blend, or z-index mishaps. Thumbnails should not be permanently covered.

Loading state never resolving

The useObjectUrl loading state may never flip to false due to a rejected/never-resolving promise in getMediaBlob. Add timing logs to confirm the promise resolves quickly and consistently.

Gigantic images used as thumbnails

If we load full-resolution originals for thumbnails, decode is slow and UI looks stuck (black placeholder) → generate/use small thumbnails (e.g., max 256–512px) and reserve full-res for the lightbox.

Service Worker interference

If a SW is caching/fetch-handling image requests incorrectly, it can serve corrupt/empty responses. Temporarily bypass SW for media to test.

🛠️ Make these changes (keep it minimal & safe)

Instrument + verify

Add console timing around getMediaBlob and image decode to measure: start → blob ready → URL created → image onload fired.

Log for several problem items: {id, source(store? network?), blob.size, blob.type}.

Guarantee a valid Blob

Ensure getMediaBlob always returns a real Blob with a correct image MIME type (image/jpeg or image/png/image/webp). If necessary, create a Blob with the right type before generating an object URL.

Handle HEIC

Detect HEIC/HEIF inputs and convert to JPEG/WEBP during ingest (or before display). Store a converted version for rendering. (Do the smallest necessary change now—don’t refactor the pipeline.)

Fix object-URL cleanup

Don’t revoke the URL until the component unmounts or the image is replaced. Avoid revoking immediately in an effect that runs before <img> completes loading.

Remove accidental masks

Inspect LotThumbnail container classes. If there’s a bg-black/overlay that doesn’t get toggled off, remove or ensure it sits behind the <img>. Check position and z-index.

Proper conditional rendering

Only render the <img> when url is non-empty. While loading, show a neutral skeleton (not a pure black block). Ensure width/height/aspect are set so layout doesn’t jump.

Introduce/Use thumbnails (performance)

If not already stored, generate a small thumbnail once per image (client-side is fine) and store it (e.g., in IndexedDB) to be used in the grid. Keep original full-res for the lightbox.

In LightboxCarousel, preload the next/prev image and avoid regenerating object URLs on every swipe.

SW sanity check

Temporarily disable SW image interception. If behavior improves, add a rule to pass through media requests/blobs untouched.

📏 Acceptance criteria

On /review, visible thumbnails (not black) within ~300ms for existing items.

No console errors about invalid blob types, revoked URLs, or decode failures.

Clicking a thumbnail opens the viewer with the image visible within ~500ms.

Navigating next/prev in the lightbox is smooth (no freezing). Memory doesn’t climb uncontrollably when flipping through many images.

Works both in Replit dev and (sanity check) production build locally.

🧪 Test plan (limited scope; no heavy compute)

Test with 6–10 mixed photos (including any captured from iPhone).

Refresh /review twice to ensure cached path works.

Measure with console.time—report timings for blob retrieval, URL creation, and image onload.

📝 Deliverables

A brief summary of root cause(s) found.

A list of the minimal changes made (file names and what changed).

Before/after timing notes for thumbnail load and lightbox next/prev latency.

Any follow-up recommendations (optional) if deeper refactor is needed.