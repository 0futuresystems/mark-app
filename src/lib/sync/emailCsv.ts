import { getServerEnv } from '../env';

export interface EmailConfig {
  apiKey: string;
  fromEmail: string;
  toEmail: string;
}

export interface EmailResult {
  success: boolean;
  messageId?: string;
  error?: string;
}

export function getEmailConfig(): EmailConfig | null {
  try {
    const env = getServerEnv(['RESEND_API_KEY', 'EMAIL_FROM', 'EMAIL_TO']);
    
    if (!env.RESEND_API_KEY || !env.EMAIL_FROM || !env.EMAIL_TO) {
      console.warn('Email configuration incomplete');
      return null;
    }

    return {
      apiKey: env.RESEND_API_KEY,
      fromEmail: env.EMAIL_FROM,
      toEmail: env.EMAIL_TO
    };
  } catch (error) {
    console.error('Failed to get email config:', error);
    return null;
  }
}

export async function sendCsvEmail(
  csvContent: string,
  auctionName: string,
  customToEmail?: string
): Promise<EmailResult> {
  const config = getEmailConfig();
  if (!config) {
    return {
      success: false,
      error: 'Email service not configured (RESEND_API_KEY, EMAIL_FROM, or EMAIL_TO missing)'
    };
  }

  try {
    const toEmail = customToEmail || config.toEmail;
    const today = new Date().toISOString().split('T')[0];
    const fileName = `lots_${auctionName.replace(/[^a-zA-Z0-9]/g, '_')}_${today}.csv`;

    const response = await fetch('https://api.resend.com/emails', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${config.apiKey}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        from: config.fromEmail,
        to: [toEmail],
        subject: `Lot Data Export - ${auctionName} (${today})`,
        html: `
          <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
            <h2 style="color: #333;">Lot Data Export</h2>
            <p>Please find attached the CSV file containing all lot data and media links for <strong>${auctionName}</strong>.</p>
            
            <div style="background-color: #f5f5f5; padding: 15px; border-radius: 5px; margin: 20px 0;">
              <h3 style="margin-top: 0; color: #666;">Export Details:</h3>
              <ul style="margin-bottom: 0;">
                <li><strong>Auction:</strong> ${auctionName}</li>
                <li><strong>Date:</strong> ${today}</li>
                <li><strong>File:</strong> ${fileName}</li>
              </ul>
            </div>
            
            <p style="color: #666; font-size: 14px;">
              This CSV contains all lot information with presigned URLs for media files. 
              The URLs will expire in 14 days for security reasons.
            </p>
            
            <hr style="border: none; border-top: 1px solid #eee; margin: 30px 0;">
            <p style="color: #999; font-size: 12px;">
              Generated by Lot Logger â€¢ ${new Date().toLocaleString()}
            </p>
          </div>
        `,
        attachments: [
          {
            filename: fileName,
            content: Buffer.from(csvContent).toString('base64'),
            content_type: 'text/csv'
          }
        ]
      }),
    });

    const result = await response.json();

    if (!response.ok) {
      return {
        success: false,
        error: result.message || `HTTP ${response.status}: ${response.statusText}`
      };
    }

    return {
      success: true,
      messageId: result.id
    };
  } catch (error) {
    return {
      success: false,
      error: error instanceof Error ? error.message : 'Unknown error occurred'
    };
  }
}

export function isEmailConfigured(): boolean {
  return getEmailConfig() !== null;
}
